% Author : Musa AYDIN  |  Revisão: Vinícius A. O. L. Moura (2025-08-05)
% e-mail : maydin@fsm.edu.tr
% Fatih Sultan Mehmet Vakif University – Dept. of Computer Engineering
% -------------------------------------------------------------------------
%                 GERCHBERG–SAXTON (GS) – VERSÃO CORRIGIDA
% -------------------------------------------------------------------------
% Esta versão garante que a imagem-alvo (Target) tenha a mesma resolução
% do feixe de entrada (input_intensity), evitando o erro de dimensões
% incompatíveis na linha:  B = abs(input_intensity) .* exp(1i*angle(A));
%
% → Principais mudanças
%   • Definição do tamanho N em um único ponto do código.
%   • Redimensionamento da imagem-alvo via imresize.
%   • Conversão direta para formato [0 1] com im2double.
% -------------------------------------------------------------------------

clear;  close all;  clc
tic;

%% --------------------- PARÂMETROS BÁSICOS ------------------------------
N     = 1000;                   % resolução (pixels) do plano de simulação
sigma = 1000;                     % largura (waist) do feixe gaussiano
iter  = 2;                   % número de iterações GS

%% -------------------- FEIXE DE ENTRADA (GAUSSIANO) ---------------------
x = linspace(-10, 10, N);
y = linspace(-10, 10, N);
[X, Y] = meshgrid(x, y);

input_intensity = exp( -(X.^2 + Y.^2) / (2*sigma^2) );   % pico = 1

figure; surf(input_intensity); shading interp;
title('Input intensity (Gaussian beam)');

%% ------------------------ IMAGEM-ALVO (TARGET) -------------------------
Target = imread('espaco.jpeg');         % coloque a imagem na mesma pasta
Target = rgb2gray(Target);              % converte p/ escala de cinza
Target = im2double(Target);             % [0 1] em ponto flutuante
Target = imresize(Target, [N N]);       % garante N×N pixels

%% -------------------------- INICIALIZAÇÃO ------------------------------
A     = fftshift( ifft2( fftshift(Target) ) );
error = zeros(iter,1);

%% ------------------------- LOOP GS PRINCIPAL ---------------------------
for k = 1:iter
    B = abs(input_intensity) .* exp(1i * angle(A));
    C = fftshift( fft2( fftshift(B) ) );
    D = abs(Target)        .* exp(1i * angle(C));
    A = fftshift( ifft2( fftshift(D) ) );

    error(k) = norm( abs(C) - abs(Target), 'fro' );
end

%% --------------------------- VISUALIZAÇÕES -----------------------------
figure;
subplot(2,1,1);
imshow(Target,[]); title('Imagem-alvo (Target)');

subplot(2,1,2);
imagesc(abs(C)); axis image off;
title(sprintf('Reconstrução após %d iterações', iter));

figure;
plot(1:iter, error, 'LineWidth',1.2);
grid on; xlabel('Iteração'); ylabel('Erro (norma Frobenius)');
title('Convergência do algoritmo GS');

figure;
imagesc(abs(C)); axis image off;
title('Reconstrução final (amplitude)');

toc;
